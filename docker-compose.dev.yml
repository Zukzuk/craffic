version: "3"

services:

  # # The craffic reactjs_web service is responsible for running our webclient.
  # reactjs_web:
  #   container_name: reactjs_web
  #   build:
  #     # Tell Docker which files should be sent to the Docker daemon
  #     context: ./web
  #     # Tell compose to only run the 'development' stage of the docker file
  #     target: development
  #   volumes:
  #   - ./web:/usr/src/app
  #   - /usr/src/app/node_modules
  #   ports:
  #   - ${REACTJS_PORT}:3000
  #   # This runs after development stage is done
  #   command: react-scripts start
  #   env_file:
  #   - ./web/.docker.env
  #   networks:
  #   - postgres
  #   depends_on:
  #   - redis
  #   - postgres

  # The craffic nestjs_server service is responsible for running our server and API.
  nestjs-server:
    container_name: nestjs-server
    build:
      context: ./server
      dockerfile: dockerfile.dev
      # Tell compose to only build the 'development' stage of the docker file
      target: development
     # This runs after 'development' stage is completed
    command: npm run start:dev
    volumes:
    # Use bind mount to make hot reloading possible in containerized dev env:
    # When we change a file on our host machine, the file will also be changed in the container, hence 'bind'. 
    # The NestJS dev server, while still running inside the container, will keep restarting on each file change.
    - ./server:/usr/src/app
    # Use an anonymous volume to prevent the container's node_modules to be overridden by the host's node_modules.
    # This should be prevented because the host's node_modules might be different and can cause problems when reflected in the container.
    # This is a seperate issue from 'COPY . .' in dockerfile, where overwriting the node_modules is prevented by the .dockerignore.
    - /usr/src/app/node_modules
    # Add hardcoded library volume for now
    - ./library:/usr/library
    ports:
    - 4000:4000
    # For debugging purposes
    - 9229:9229
    networks:
    - postgres
    depends_on:
    - redis
    - postgres

  redis:
    container_name: redis
    image: redis:latest
    env_file:
    - .env
    networks:
    - postgres

  postgres:
    container_name: postgres
    image: postgres:latest
    networks:
    - postgres
    env_file:
    - .env
    ports:
    - 5432:5432
    volumes:
    - pgdata:/var/lib/postgresql/data
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    links:
    - postgres:postgres
    ports:
    - 8080:80
    volumes:
    - pgadmindata:/var/lib/pgadmin/data
    env_file:
    - .env
    networks:
    - postgres

networks:
  postgres:
    driver: bridge

volumes:
  pgdata:
  pgadmindata: